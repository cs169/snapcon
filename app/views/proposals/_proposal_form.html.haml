= form_for(@event, url: @url) do |f|
  %h4
    Proposal Information
  %hr
  .form-group
    = f.label :title
    %abbr{title: 'This field is required'} *
    = f.text_field :title, autofocus: true, required: true, class: 'form-control'
  .form-group
    = f.label :subtitle
    = f.text_field :subtitle, class: 'form-control'
  .form-group
    = f.label :speaker_ids, 'Speakers'
    - if f.object.speakers.any?
      %p
        Current:
        = f.object.speakers.pluck(:username).join(', ')
    = f.select :speaker_ids, user_options_for_dropdown(@event, :speakers), {},{ multiple: true, class: "select-help-toggle js-userSelector form-control", placeholder: "Select speakers..." }
    %span.help-block
      The people responsible for the event. You can only select existing users.

  - if current_user.manages_volunteers?(@conference)
    = volunteer_selector_input f

  - if @program.tracks.confirmed.cfp_active.any?
    .form-group
      = f.label :track_id, 'Track'
      = f.select :track_id, @program.tracks.confirmed.cfp_active.pluck(:name, :id), { include_blank: '(Please select)' }, { class: 'form-control' }
  .form-group
    = f.label :event_type_id, 'Type'
    = f.select :event_type_id, event_type_select_options(@conference.program.event_types), { include_blank: false }, { class: 'select-help-toggle form-control' }
  - if @program.languages.present?
    .form-group
    = f.label :language
    = f.select :language, @languages, { include_blank: false }, { class: 'select-help-toggle form-control' }

  - if @conference.program.difficulty_levels.any?
    = f.label :difficulty_level
    = f.select :difficulty_level_id, @conference.program.difficulty_levels.map{ |level| [level.title, level.id ] }, { include_blank: false }, { class: 'select-help-toggle form-control' }
    - @conference.program.difficulty_levels.each do |difficulty_level|
      %span{ class: 'help-block select-help-text collapse event_difficulty_level_id', id: "#{difficulty_level.id}-help" }
        = difficulty_level.description

  = render 'proposals/submission_type_content_form', f: f, program: @program

  -# TODO-SNAPCON: Extract this to be a `conference_committee_role?`
  - if current_user.has_any_role?(:admin, { name: :organizer, resource: @conference }, { name: :cfp, resource: @conference })
    %br
    = f.label :committee_review
    = f.text_area :committee_review, rows: 5, data: { provide: 'markdown' }, class: 'form-control md-input'
    %span.help-block= markdown_hint('This field is shared with the submission authors.')
  - elsif @event.committee_review.present?
    %br
    %strong.control-label Committee Review
    %small
      Use this feedback to improve your submission.
    .well
      = markdown(@event.committee_review)

  - if @program.cfp&.enable_registrations?
    %h4 Event Registration
    %hr
    .checkbox
      %label
        = f.check_box :require_registration
        Require participants to register to your event
    .form-group
      = f.number_field :max_attendees
      %span.help-block
        - message = @event.room ? "Value must be between 1 and #{@event.room.size}" : 'Check room capacity after scheduling.'
        = 'The maximum number of participants. ' + message

  - if current_user.has_any_role?(:admin, { name: :organizer, resource: @conference }, { name: :cfp, resource: @conference })
    .checkbox
      %label
        = f.check_box :is_highlight
        Is a highlight?

  %p.text-right
    = link_to '#description', 'data-toggle' => 'collapse' do
      Do you require something special for your event?
  #description{ class: "collapse #{ 'in' if @event.description.present? }" }
    .form-group
      = f.label :description, 'Requirements'
      = f.text_area :description, rows: 5, class: 'form-control'
      %span.help-block
        Eg. Whiteboard, printer, or something like that.

  %p.text-right
    = f.submit 'Update Proposal', class: 'btn btn-success'

= render partial: 'shared/user_selectize'
